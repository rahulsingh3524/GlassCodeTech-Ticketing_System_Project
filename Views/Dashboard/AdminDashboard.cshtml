@{
    ViewData["Title"] = "Admin Dashboard";
    var assignments = ViewBag.AssignmentList as List<Dictionary<string, object>>;
    var statusCounts = ViewBag.StatusCounts as List<Dictionary<string, object>>;
    var allTickets = ViewBag.AllTickets as List<Dictionary<string, object>>;
}



<div class="container mt-5">
    <h2 class="mb-4">Admin Dashboard</h2>
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card shadow-sm p-3 mb-3">
                <h5>Total Tickets Raised</h5>
                <h3 class="text-primary">@ViewBag.TotalTickets</h3>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm p-3 mb-3">
                <h5>Total Tickets Assigned</h5>
                <h3 class="text-info">@ViewBag.AssignedTickets</h3>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm p-3 mb-3">
                <h5>Ticket Status Summary</h5>
                <ul class="list-group">
                    @if (statusCounts != null)
                    {
                        foreach (var row in statusCounts)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @row["status_name"]
                                <span class="badge bg-secondary">@row["count"]</span>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>

    <div>
        <h4>Tickets Assigned to Supporters</h4>
        <table id="assignmentsTable" class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Ticket ID</th>
                    <th>Subject</th>
                    <th>Supporter</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th>Deadline</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (assignments != null && assignments.Count > 0)
                {
                    foreach (var ticket in assignments)
                    {
                        string statusLower = ticket["status"].ToString().ToLower();
                        string rowClass = "";
                        string badgeClass = "secondary";
                        switch (statusLower)
                        {
                            case "open":
                                rowClass = "table-success";
                                badgeClass = "success";
                                break;
                            case "closed":
                                rowClass = "table-danger";
                                badgeClass = "danger";
                                break;
                            case "resolved":
                                rowClass = "table-primary";
                                badgeClass = "primary";
                                break;
                            case "in_progress":
                                rowClass = "table-warning";
                                badgeClass = "warning";
                                break;
                            case "cancel":
                                rowClass = "table-secondary";
                                badgeClass = "secondary";
                                break;
                        }
                        <tr class="@rowClass">
                            <td>@ticket["ticket_id"]</td>
                            <td>@ticket["subject"]</td>
                            <td>@ticket["supporter_name"]</td>
                            <td>
                                <span class="badge bg-@badgeClass text-capitalize">
                                    @ticket["status"]
                                </span>
                            </td>
                            <td>@ticket["priority"]</td>
                            <td>@ticket["deadline"]</td>
                            <td>
                                <a href="@Url.Action("Details", "Ticket", new { id = ticket["id"] })" class="btn btn-sm btn-outline-info">View</a>
                                <a href="@Url.Action("Thread", "Ticket", new { id = ticket["id"] })" class="btn btn-sm btn-primary ms-1">
                                    Thread
                                </a>

                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="7" class="text-center">No assignments found.</td></tr>
                }
            </tbody>
        </table>
    </div>

    <h4 class="mt-4">All Tickets</h4>

    <table id="ticketsTable" class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Ticket ID</th>
                <th>Subject</th>
                <th>Supporter</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Deadline</th>
                <th>Assign</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (allTickets != null && allTickets.Count > 0)
            {
                foreach (var ticket in allTickets)
                {
                    string statusLower = ticket["status"].ToString().ToLower();
                    string supporterName = ticket["supporter_name"].ToString();
                    bool canAssign = statusLower == "open" || statusLower == "in_progress";
                    string rowClass = "";
                    string badgeClass = "secondary";
                    switch (statusLower)
                    {
                        case "open":
                            rowClass = "table-success";
                            badgeClass = "success";
                            break;
                        case "closed":
                            rowClass = "table-danger";
                            badgeClass = "danger";
                            break;
                        case "resolved":
                            rowClass = "table-primary";
                            badgeClass = "primary";
                            break;
                        case "in_progress":
                            rowClass = "table-warning";
                            badgeClass = "warning";
                            break;
                        case "cancel":
                            rowClass = "table-secondary";
                            badgeClass = "secondary";
                            break;
                    }
                    <tr class="@rowClass">
                        <td>@ticket["ticket_id"]</td>
                        <td>@ticket["subject"]</td>
                        <td>@supporterName</td>
                        <td>
                            <span class="badge bg-@badgeClass text-capitalize">
                                @ticket["status"]
                            </span>
                        </td>
                        <td>@ticket["priority"]</td>
                        <td>@ticket["deadline"]</td>
                        <td>
                            @if (canAssign && supporterName == "Unassigned")
                            {
                                <a href="@Url.Action("Assign", "Ticket", new { ticketId = ticket["id"] })"
                                   class="btn btn-sm btn-outline-success">Assign</a>
                            }
                            else if (canAssign && supporterName != "Unassigned")
                            {
                                <a href="@Url.Action("Assign", "Ticket", new { ticketId = ticket["id"] })"
                                   class="btn btn-sm btn-outline-warning">Reassign</a>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-secondary" disabled>Not Assignable</button>
                            }
                        </td>
                        <td>
                            <a href="@Url.Action("Details", "Ticket", new { id = ticket["id"] })"
                               class="btn btn-sm btn-outline-info">View</a>
                            <a href="@Url.Action("Thread", "Ticket", new { id = ticket["id"] })" class="btn btn-sm btn-primary ms-1">
                                Thread
                            </a>

                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="8" class="text-center">No tickets found.</td></tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {

    <style>
        .dataTables_filter input {
            width: 320px !important;
            max-width: 100%;
            display: inline-block;
        }

        .dt-buttons.btn-group {
            margin-bottom: 10px;
        }
    </style>

    <script>
        setInterval(function () {
            window.location.reload();
        }, 30000);

        // $(function () {
        //     $('#ticketsTable').DataTable({
        //         retrieve: true,
        //         responsive: true,
        //         lengthChange: true,
        //         autoWidth: false,
        //         dom: '<"row mb-2"<"col-sm-4"B><"col-sm-4"l><"col-sm-4"f>>' +
        //              '<"row"<"col-sm-12"tr>>' +
        //              '<"row"<"col-sm-5"i><"col-sm-7"p>>',
        //         buttons: [
        //             'copy', 'csv', 'excel', 'pdf', 'print', 'colvis'
        //         ],
        //         language: {
        //             search: "Search:"
        //         }
        //     });
        //     $('#assignmentsTable').DataTable({
        //         retrieve: true,
        //         responsive: true,
        //         lengthChange: true,
        //         autoWidth: false,
        //         dom: '<"row mb-2"<"col-sm-4"B><"col-sm-4"l><"col-sm-4"f>>' +
        //              '<"row"<"col-sm-12"tr>>' +
        //              '<"row"<"col-sm-5"i><"col-sm-7"p>>',
        //         buttons: [
        //             'copy', 'csv', 'excel', 'pdf', 'print', 'colvis'
        //         ]
        //     });

        //     $('.dataTables_wrapper .dt-buttons').css({'float':'left'});
        // });
    </script>

    <script>
        $(function () {
            // Helper function to ensure buttons bar is shown
            function initDataTableWithButtons(selector) {
                var tbl = $(selector).DataTable({
                    retrieve: true,
                    responsive: true,
                    lengthChange: true,
                    autoWidth: false,
                    dom: '<"row mb-2"<"col-sm-4"B><"col-sm-4"l><"col-sm-4"f>>' +
                         '<"row"<"col-sm-12"tr>>' +
                         '<"row"<"col-sm-5"i><"col-sm-7"p>>',
                    buttons: [
                        'copy', 'csv', 'excel', 'pdf', 'print', 'colvis'
                    ]
                });
                // Attach buttons toolbars as in AdminLTE demo:
                tbl.buttons().container().appendTo(
                    $(selector + '_wrapper .col-sm-4:eq(0)')
                );
            }

            initDataTableWithButtons('#ticketsTable');
            initDataTableWithButtons('#assignmentsTable');

            $('.dataTables_wrapper .dt-buttons').css({'float':'left'});
        });
    </script>

}
